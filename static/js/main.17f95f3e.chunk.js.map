{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/Filter/Filter.module.css","Redux/contacts-actions.js","Redux/contacts-selectors.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/ContactForm/ContactForm.js","App.js","Redux/contacts-reducer.js","Redux/store.js","index.js"],"names":["module","exports","submitForm","createAction","deleteItem","filterItems","getContacts","state","contacts","items","getVisibleContacts","allContacts","filter","getFilter","normalizedFilter","toLowerCase","console","log","name","includes","ContactList","dispatch","useDispatch","useSelector","length","className","s","ContactsList","map","id","number","onClick","Filter","e","htmlFor","type","pattern","title","onChange","target","value","ContactForm","contactsAll","inputNameId","uuidv4","inputNumberId","useState","setName","setNumber","contact","handleChangeEvent","Phonebook","onSubmit","preventDefault","some","alert","required","App","itemsReducer","createReducer","payload","filterReducer","_","contactsReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17f95f3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsList\":\"ContactList_ContactsList__2QcPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__I1D3Y\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const submitForm = createAction('form/submit');\r\nexport const deleteItem = createAction('list/delete');\r\nexport const filterItems = createAction('list/filter');\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n  console.log(normalizedFilter);\r\n\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteItem } from '../../Redux/contacts-actions';\r\nimport s from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { getVisibleContacts } from '../../Redux/contacts-selectors';\r\n\r\nconst ContactList = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  if (contacts.length === 0) {\r\n    return <h2>No results were found...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div className={s.ContactsList}>\r\n      <ul>\r\n        {contacts.map(({ name, id, number }) => (\r\n          <li key={id}>\r\n            <p>{name + ': ' + number}</p>\r\n            <button\r\n              onClick={() => {\r\n                dispatch(deleteItem(id));\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n};\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     contacts: state.contacts.items,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onDeleteItem: id => dispatch(actions.deleteItem(id)),\r\n\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport s from './Filter.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filterItems } from '../../Redux/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ e }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={s.Filter}>\r\n      <label htmlFor=\"\">Find contacts by name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        onChange={e => {\r\n          dispatch(filterItems(e.target.value));\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     inputSearchVal: state.contacts.filter,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onSearchVal: e => dispatch(filterItems(e.nativeEvent.data)),\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { submitForm } from '../../Redux/contacts-actions';\r\nimport s from './ContactForm.module.css';\r\nimport { getContacts } from '../../Redux/contacts-selectors';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const contactsAll = useSelector(getContacts);\r\n  const inputNameId = uuidv4();\r\n  const inputNumberId = uuidv4();\r\n  const id = uuidv4();\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contact = { name, number, id };\r\n\r\n  const handleChangeEvent = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = e.target;\r\n    const filterResult = contactsAll.some(value => value.name === contact.name);\r\n    if (!filterResult) {\r\n      dispatch(submitForm(contact));\r\n    } else alert(`${contact.name} is already in contacts`);\r\n    name.value = '';\r\n    number.value = '';\r\n  };\r\n\r\n  return (\r\n    <div className={s.Phonebook}>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor={inputNameId}>Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          id={inputNameId}\r\n          onChange={handleChangeEvent}\r\n        />\r\n        <label htmlFor={inputNumberId}>Number</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          id={inputNumberId}\r\n          onChange={handleChangeEvent}\r\n        />\r\n        <button type=\"submit\">Add contacts</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     submitVal: state.contacts.items,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onSubmitForm: contact => dispatch(submitForm(contact)),\r\n//   };\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nexport default ContactForm;\r\n","import './App.css';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport ContactForm from './Components/ContactForm/ContactForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h1>Contacts</h1>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initState = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nexport const itemsReducer = createReducer(initState, {\r\n  'form/submit': (state, { payload }) => [...state, payload],\r\n  'list/delete': (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nexport const filterReducer = createReducer('', {\r\n  'list/filter': (_, { payload }) => payload,\r\n});\r\n","// import { combineReducers } from 'redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { itemsReducer, filterReducer } from './contacts-reducer';\r\nimport { combineReducers } from 'redux';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   version: 1,\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n// const persistedContactsReducer = persistReducer(persistConfig, contactsReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </PersistGate> */};\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}